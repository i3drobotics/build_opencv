name: Build CUDA options

on: push

env:
  option_path: options/options_opencv4.9.0_contrib_cuda_cudnn_vc15.txt
jobs:
  build-windows:
    runs-on: windows-2019
    steps:
        - uses: actions/checkout@v2
        - uses: Jimver/cuda-toolkit@v0.2.14
          id: cuda-toolkit
          with:
            cuda: '12.3.2'
        - uses: ilammy/msvc-dev-cmd@v1.4.1
          with:
            toolset: 16.0

        - name: Download OpenCV repo/s
          working-directory: scripts/windows
          shell: cmd
          run: .\download.bat options\options_opencv4.9.0_contrib_cuda_vc16.txt

        - name: Build OpenCV
          working-directory: scripts/windows
          shell: cmd
          run: .\build.bat options\options_opencv4.9.0_contrib_cuda_vc16.txt

        
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: ["ubuntu:20.04", "ubuntu:22.04", "ubuntu:23.04", "ubuntu:23.10"]
    container:
      image: ${{matrix.os}}
    steps:
    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: false
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true
    - uses: actions/checkout@v2

    - name: Setup things in container
      run: |
        apt update
        apt install -y sudo wget git build-essential
    
    - name: Download CUDA
      working-directory: scripts/linux
      run: |
        sudo ./download_cuda.sh
    
    - name: Download CUDNN8
      working-directory: scripts/linux
      run: |
        sudo ./download_cudnn.sh
    
    - name: Download OpenCV repo/s
      run: |
        scripts/linux/download.sh $option_path

    - name: Determine CUDA and cuDNN Versions
      run: |
        echo "CUDA_VERSION=$(nvcc --version | grep release | sed 's/.*release //' | sed 's/,.*//')" >> $GITHUB_ENV
        echo "CUDNN_VERSION=$(cat /usr/include/x86_64-linux-gnu/cudnn_version.h | grep CUDNN_MAJOR -A 2 | sed 's/#define CUDNN_MAJOR //' | tr '\n' '.' | sed 's/\.$//')" >> $GITHUB_ENV
        echo $CUDNN_VERSION
        echo $CUDA_VERSION
    
    - name: Patch stdlib
      run: |
        sudo sed -i '/_S_nothrow_init<.*>/ s/^/    \/\/ /' /usr/include/c++/*/bits/std_function.h
    
    - name: Build OpenCV
      run: |
        scripts/linux/build.sh $option_path

    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Build artifact
        path: install

    - name: Create Tarball
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        asset_name=opencv-${{github.ref.name}}-${{ matrix.os }}-cuda${CUDA_VERSION}-cudnn${CUDNN_VERSION}.tar.gz
        tar -czvf ${asset_name} -C install
        echo "ASSET_NAME=${asset_name}" >> $GITHUB_ENV

    - name: Upload Release Asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.ASSET_NAME }}

